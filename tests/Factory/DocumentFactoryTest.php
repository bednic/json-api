<?php

/**
 * Created by lasicka@logio.cz
 * at 24.05.2021 15:04
 */

declare(strict_types=1);

namespace JSONAPI\Test\Factory;

use JSONAPI\Document\Document;
use JSONAPI\Driver\AnnotationDriver;
use JSONAPI\Exception\Document\ForbiddenDataType;
use JSONAPI\Factory\DocumentFactory;
use JSONAPI\Factory\MetadataFactory;
use JSONAPI\Metadata\MetadataRepository;
use JSONAPI\URI\Path\PathInterface;
use JSONAPI\URI\Path\PathParser;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Cache\Adapter\ArrayAdapter;
use Symfony\Component\Cache\Psr16Cache;

class DocumentFactoryTest extends TestCase
{
    public static MetadataRepository $metadata;
    public static PathInterface $path;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::$metadata = MetadataFactory::create(
            [RESOURCES . '/valid'],
            new Psr16Cache(new ArrayAdapter()),
            new AnnotationDriver()
        );
        self::$path     = (new PathParser(self::$metadata, 'http://unit.test.org'))
            ->parse('/getter/1');
    }

    /**
     * @dataProvider good
     */
    public function testDecode($object)
    {
        $factory = new DocumentFactory(self::$metadata, self::$path);
        $data    = json_encode($object);
        $doc     = $factory->decode($data);
        $this->assertInstanceOf(Document::class, $doc);
    }

    /**
     * @dataProvider bad
     */
    public function testErrors($object)
    {
        $this->expectException(ForbiddenDataType::class);
        $factory = new DocumentFactory(self::$metadata, self::$path);
        $data    = json_encode($object);
        $factory->decode($data);
    }

    public function good(): array
    {
        return [
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "stringProperty" => "string",
                            "intProperty"    => 1,
                            "doubleProperty" => 1.0,
                            "boolProperty"   => true
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "stringProperty" => null,
                            "intProperty"    => 0,
                            "doubleProperty" => 0.0,
                            "boolProperty"   => false
                        ]
                    ]
                ]
            ]
        ];
    }

    public function bad(): array
    {
        return [
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "stringProperty" => 1,
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "stringProperty" => false,
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "stringProperty" => 1.0,
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "stringProperty" => [],
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "intProperty" => .1,
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "intProperty" => false,
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "intProperty" => "1",
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "intProperty" => null,
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "doubleProperty" => "1.1",
                        ]
                    ]
                ]
            ],
            [
                [
                    "data" => [
                        "type"       => "getter",
                        "id"         => "1",
                        "attributes" => [
                            "doubleProperty" => false,
                        ]
                    ]
                ]
            ]
        ];
    }
}
