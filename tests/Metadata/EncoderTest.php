<?php

declare(strict_types=1);

namespace JSONAPI\Test\Metadata;

use JSONAPI\Document\ResourceObject;
use JSONAPI\Document\ResourceObjectIdentifier;
use JSONAPI\Driver\AnnotationDriver;
use JSONAPI\Document\LinkComposer;
use JSONAPI\Encoding\Encoder;
use JSONAPI\Metadata\MetadataFactory;
use JSONAPI\Metadata\MetadataRepository;
use JSONAPI\Test\Resources\Valid\GettersExample;
use JSONAPI\Test\Resources\Valid\MetaExample;
use JSONAPI\URI\Fieldset\FieldsetParser;
use JSONAPI\URI\Inclusion\InclusionParser;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Cache\Adapter\ArrayAdapter;
use Symfony\Component\Cache\Psr16Cache;

/**
 * Class EncoderTest
 *
 * @package JSONAPI\Test\Metadata
 */
class EncoderTest extends TestCase
{
    private static MetadataRepository $metadata;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::$metadata = MetadataFactory::create(
            [RESOURCES . '/valid'],
            new Psr16Cache(new ArrayAdapter()),
            new AnnotationDriver()
        );
    }

    public function testConstruct()
    {
        $encoder = new Encoder(self::$metadata);
        $this->assertInstanceOf(Encoder::class, $encoder);
        return $encoder;
    }

    /**
     * @depends testConstruct
     */
    public function testIdentify(Encoder $encoder)
    {
        $object = new GettersExample('id');
        $identifier = $encoder->identify($object);
        $this->assertInstanceOf(ResourceObjectIdentifier::class, $identifier);
    }

    /**
     * @depends testConstruct
     */
    public function testEncode(Encoder $encoder)
    {
        $object = new GettersExample('id');
        $resource = $encoder->encode($object);
        $this->assertInstanceOf(ResourceObject::class, $resource);
    }

    /**
     * @depends testConstruct
     */
    public function testRelationshipMetaEncode(Encoder $encoder)
    {
        $object = new MetaExample('meta');
        $resource = $encoder->encode($object);
        $this->assertInstanceOf(ResourceObject::class, $resource);
        $this->assertFalse($resource->jsonSerialize()->relationships->relation->getMeta()->isEmpty());
    }
}
